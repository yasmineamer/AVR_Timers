
Challenge2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000202  2**0
                  ALLOC
  2 .stab         00000408  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006ac  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  74:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:
#include<avr/io.h>
#include<avr/interrupt.h>
unsigned char g_tick = 0;

ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 60 00 	sts	0x0060, r24
	PORTC ^= (1<<PC0);
  a4:	a5 e3       	ldi	r26, 0x35	; 53
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e5 e3       	ldi	r30, 0x35	; 53
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	90 81       	ld	r25, Z
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	89 27       	eor	r24, r25
  b2:	8c 93       	st	X, r24
	if(g_tick == 2)
  b4:	80 91 60 00 	lds	r24, 0x0060
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	41 f4       	brne	.+16     	; 0xcc <__vector_19+0x50>
	{
		PORTC ^= (1<<PC1);
  bc:	a5 e3       	ldi	r26, 0x35	; 53
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e5 e3       	ldi	r30, 0x35	; 53
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	90 81       	ld	r25, Z
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	89 27       	eor	r24, r25
  ca:	8c 93       	st	X, r24
	}
	if (g_tick == 4)
  cc:	80 91 60 00 	lds	r24, 0x0060
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	91 f4       	brne	.+36     	; 0xf8 <__vector_19+0x7c>
	{
		PORTC ^= (1<<PC2);
  d4:	a5 e3       	ldi	r26, 0x35	; 53
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	e5 e3       	ldi	r30, 0x35	; 53
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	84 e0       	ldi	r24, 0x04	; 4
  e0:	89 27       	eor	r24, r25
  e2:	8c 93       	st	X, r24
		PORTC ^= (1<<PC1);
  e4:	a5 e3       	ldi	r26, 0x35	; 53
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e5 e3       	ldi	r30, 0x35	; 53
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	90 81       	ld	r25, Z
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	89 27       	eor	r24, r25
  f2:	8c 93       	st	X, r24

		g_tick = 0;
  f4:	10 92 60 00 	sts	0x0060, r1
	}
}
  f8:	cf 91       	pop	r28
  fa:	df 91       	pop	r29
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	bf 91       	pop	r27
 102:	af 91       	pop	r26
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <TIMER0_COMP_init>:

void TIMER0_COMP_init (int compare_value)
{
 112:	df 93       	push	r29
 114:	cf 93       	push	r28
 116:	00 d0       	rcall	.+0      	; 0x118 <TIMER0_COMP_init+0x6>
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	9a 83       	std	Y+2, r25	; 0x02
 11e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
 120:	e2 e5       	ldi	r30, 0x52	; 82
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	10 82       	st	Z, r1
	OCR0 = 50;
 126:	ec e5       	ldi	r30, 0x5C	; 92
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	82 e3       	ldi	r24, 0x32	; 50
 12c:	80 83       	st	Z, r24
	// Enable Timer0 Compare Interrupt
	TIMSK |= (1<< OCIE0); //ENABLE MODULE INTERRUPT
 12e:	a9 e5       	ldi	r26, 0x59	; 89
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e9 e5       	ldi	r30, 0x59	; 89
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	8c 93       	st	X, r24
	 * FOC0 ==> SET BIT
	 * WGM00 ==> CLEAR BIT, WGM01 ==> SET BIT (CTC_MODE)
	 * COM01 ==> CLEAR BIT ,COM00 ==> SET BIT (TOGGEL ON COMPARE MATCH)
	 * CS00,CS02 ==> CLEAR BITS, CS01 ==>SET BIT (TIMER CLOCK)
	 */
	TCCR0 = (1<<FOC0)|(1<<WGM01)|(1<<COM00)|(1<<CS01);
 13c:	e3 e5       	ldi	r30, 0x53	; 83
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	8a e9       	ldi	r24, 0x9A	; 154
 142:	80 83       	st	Z, r24
}
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	cf 91       	pop	r28
 14a:	df 91       	pop	r29
 14c:	08 95       	ret

0000014e <main>:


int main (void)
{
 14e:	df 93       	push	r29
 150:	cf 93       	push	r28
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
	//first 3pins of portc are output pins ==> set these bits
	DDRC |= 0X07;
 156:	a4 e3       	ldi	r26, 0x34	; 52
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e4 e3       	ldi	r30, 0x34	; 52
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	87 60       	ori	r24, 0x07	; 7
 162:	8c 93       	st	X, r24
	PORTC |= 0X07;
 164:	a5 e3       	ldi	r26, 0x35	; 53
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	e5 e3       	ldi	r30, 0x35	; 53
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	87 60       	ori	r24, 0x07	; 7
 170:	8c 93       	st	X, r24
	//ENABLE GLOBAL INTERRUPT BIT (I-BIT)
	SREG |= (1<<7);
 172:	af e5       	ldi	r26, 0x5F	; 95
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	ef e5       	ldi	r30, 0x5F	; 95
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 68       	ori	r24, 0x80	; 128
 17e:	8c 93       	st	X, r24

	TIMER0_COMP_init (50);
 180:	82 e3       	ldi	r24, 0x32	; 50
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 89 00 	call	0x112	; 0x112 <TIMER0_COMP_init>
 188:	ff cf       	rjmp	.-2      	; 0x188 <main+0x3a>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
